name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0 or 1.0.0-beta.1)'
        required: true
        type: string
      skip-tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false
      deploy-pages:
        description: 'Deploy documentation to GitHub Pages'
        required: false
        type: boolean
        default: false
      create-release:
        description: 'Create GitHub Release'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Check if this is a SNAPSHOT version
          if [[ "$VERSION" =~ -SNAPSHOT$ ]]; then
            echo "‚ùå SNAPSHOT versions cannot be published manually"
            echo "üì¶ SNAPSHOT versions should be deployed automatically via CI/CD"
            echo "üí° Tip: Use the automatic push to main branch for SNAPSHOT deployments"
            echo ""
            echo "For manual releases, use:"
            echo "  ‚Ä¢ Release versions: 1.0.0, 2.1.3"
            echo "  ‚Ä¢ Pre-release versions: 1.0.0-beta.1, 2.0.0-RC1"
            exit 1
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-qualifier (e.g., 1.0.0 or 1.0.0-beta.1)"
            exit 1
          fi
          
          echo "‚úÖ Version format is valid: $VERSION"

  release:
    name: Release
    needs: validate-version
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Update POM version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "üìù Updating POM version to $VERSION"
          cd test-project
          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false -ntp -U -B
          
          if [ -n "$(git status --porcelain)" ]; then
            git add pom.xml
            git commit -m "chore: bump version to $VERSION [skip ci]"
          fi
      
      - name: Create and push tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v$VERSION"
          
          echo "üîç Checking if tag $TAG already exists..."
          
          # Check if tag exists locally
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  Tag $TAG exists locally, deleting it..."
            git tag -d "$TAG"
          fi
          
          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "‚ö†Ô∏è  Tag $TAG exists on remote, deleting it..."
            git push origin ":refs/tags/$TAG"
          fi
          
          echo "üè∑Ô∏è  Creating tag $TAG"
          git tag -a "$TAG" -m "Release version $VERSION"
          
          echo "üì§ Pushing tag to remote"
          git push origin "$TAG"
      
      - name: Release to Maven Central
        id: release
        uses: ./
        with:
          working-directory: 'test-project'
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          maven-username: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          maven-password: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          skip-tests: ${{ github.event.inputs.skip-tests }}
          deploy-pages: ${{ github.event.inputs.deploy-pages }}
          create-release: ${{ github.event.inputs.create-release }}