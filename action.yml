name: 'Maven Release Action'
description: 'Complete Maven release workflow with Maven Central deployment and GitHub Pages'
author: 'chensoul'

branding:
  icon: 'package'
  color: 'blue'

inputs:
  java-version:
    description: 'Java version to use'
    default: '8'
    required: false
  java-distribution:
    description: 'Java distribution'
    default: 'zulu'
    required: false
  server-id:
    description: 'Maven server ID for deployment (matches <server><id> in settings.xml or pom.xml)'
    default: 'central'
    required: false
  maven-args:
    description: 'Additional Maven arguments'
    default: '-ntp -U -B'
    required: false
  gpg-private-key:
    description: 'GPG private key for signing'
    required: true
  gpg-passphrase:
    description: 'GPG passphrase'
    required: true
  maven-username:
    description: 'Maven Central username'
    required: true
  maven-password:
    description: 'Maven Central password'
    required: true
  github-token:
    description: 'GitHub token for creating releases and deploying pages'
    required: false
    default: ''
  skip-tests:
    description: 'Skip running tests'
    default: 'false'
    required: false
  deploy-pages:
    description: 'Deploy documentation to GitHub Pages'
    default: 'true'
    required: false
  create-release:
    description: 'Create GitHub Release'
    default: 'true'
    required: false
  working-directory:
    description: 'Working directory for Maven'
    default: '.'
    required: false

outputs:
  version:
    description: 'The version that was released'
    value: ${{ steps.version.outputs.version }}
  deployed:
    description: 'Whether artifacts were deployed successfully'
    value: ${{ steps.deploy.outputs.deployed }}
  release-url:
    description: 'GitHub Release URL (if created)'
    value: ${{ steps.release.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Extract version from tag
      id: version
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [[ "$GITHUB_REF" =~ ^refs/tags/v(.+)$ ]]; then
          TAG_NAME="${BASH_REMATCH[1]}"
        else
          TAG_NAME=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        fi
        
        echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "Release version: ${TAG_NAME}"

    - name: Set up JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v5
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.java-distribution }}
        cache: 'maven'
        server-id: ${{ inputs.server-id }}
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ inputs.gpg-private-key }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Build and deploy artifacts
      id: deploy
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        SKIP_TESTS_FLAG=""
        [ "${{ inputs.skip-tests }}" == "true" ] && SKIP_TESTS_FLAG="-DskipTests"
        
        mvn clean deploy site site:stage -Pcentral ${SKIP_TESTS_FLAG} ${{ inputs.maven-args }}
        echo "deployed=true" >> $GITHUB_OUTPUT
      env:
        MAVEN_USERNAME: ${{ inputs.maven-username }}
        MAVEN_PASSWORD: ${{ inputs.maven-password }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg-passphrase }}

    - name: Create GitHub Release
      id: release
      if: inputs.create-release == 'true' && startsWith(github.ref, 'refs/tags/') && inputs.github-token != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        gh release create "v${VERSION}" \
          --title "v${VERSION}" \
          --generate-notes \
          target/*.jar target/*.pom target/*.asc
        
        echo "url=https://github.com/${{ github.repository }}/releases/tag/v${VERSION}" >> $GITHUB_OUTPUT

    - name: Deploy to GitHub Pages
      if: inputs.deploy-pages == 'true' && inputs.github-token != ''
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ inputs.github-token }}
        publish_dir: ${{ inputs.working-directory }}/target/staging
        commit_message: "docs: deploy documentation for version ${{ steps.version.outputs.version }}"